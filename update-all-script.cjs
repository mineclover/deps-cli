const { EnhancedDependencyAnalyzer } = require('./dist/analyzers/EnhancedDependencyAnalyzer.js');
const { DependencyDataCollector } = require('./dist/utils/DependencyDataCollector.js');
const { DocumentPathGenerator } = require('./dist/utils/DocumentPathGenerator.js');
const fs = require('fs/promises');
const path = require('path');

async function updateAll() {
  console.log('🚀 전체 네임스페이스 업데이트 시작...\n');

  const analyzer = new EnhancedDependencyAnalyzer('.');
  const collector = new DependencyDataCollector(process.cwd());
  const pathGenerator = new DocumentPathGenerator();

  // 1단계: 의존성 분석
  console.log('📊 1단계: 의존성 분석 중...');
  const graph = await analyzer.buildProjectDependencyGraph();
  console.log(`   ✅ ${graph.nodes.size}개 파일, ${graph.edges.length}개 의존성 분석 완료\n`);

  // 2단계: 설정 로드
  console.log('📋 2단계: 네임스페이스 설정 로드 중...');
  const configContent = await fs.readFile('deps-cli.json', 'utf-8');
  const config = JSON.parse(configContent);

  const rules = Object.entries(config.namespaces).map(([namespace, rule]) => ({
    namespace,
    ...rule
  }));
  console.log(`   ✅ ${rules.length}개 네임스페이스 설정 로드 완료\n`);

  // 3단계: 데이터 수집
  console.log('🔍 3단계: 네임스페이스별 데이터 수집 중...');
  const results = [];
  for (const rule of rules) {
    const result = collector.collectForNamespace(graph, rule);
    results.push(result);
    console.log(`   📁 ${rule.namespace} (${rule.documentStrategy}): ${result.totalCount}개 항목`);
  }
  console.log();

  // 4단계: 경로 생성 및 문서 생성
  console.log('📝 4단계: 문서 경로 생성 및 파일 생성 중...');
  let totalCreated = 0;

  for (const result of results) {
    const rule = rules.find(r => r.namespace === result.namespace);
    if (!rule) continue;

    const paths = pathGenerator.generatePathsWithStrategy(result, rule);
    console.log(`   📄 ${rule.namespace}: ${paths.length}개 경로`);

    // 각 경로에 대해 문서 생성
    for (const docPath of paths) {
      const fullPath = path.resolve(docPath.documentPath);
      const dir = path.dirname(fullPath);

      try {
        // 디렉토리 생성
        await fs.mkdir(dir, { recursive: true });

        // 문서 내용 생성
        const strategy = rule.documentStrategy || 'file-mirror';
        let content = '';

        if (strategy === 'file-mirror') {
          content = `# ${docPath.sourceItem.value}

## 📄 File Mirror

**Namespace:** ${docPath.namespace}
**Strategy:** file-mirror
**Source:** \`${docPath.sourceItem.sourcePath}\`
**Pattern:** \`${docPath.sourceItem.matchedPattern}\`

## 📋 File Information

- **Type:** ${docPath.sourceItem.type}
- **Value:** ${docPath.sourceItem.value}

## 🔍 Metadata

\`\`\`json
${JSON.stringify(docPath.sourceItem.metadata || {}, null, 2)}
\`\`\`

---
*Generated by deps-cli ${new Date().toISOString()}*
`;
        } else if (strategy === 'method-mirror') {
          content = `# ${docPath.sourceItem.value}

## 🔧 Method Mirror

**Namespace:** ${docPath.namespace}
**Strategy:** method-mirror
**Source:** \`${docPath.sourceItem.sourcePath}\`
**Pattern:** \`${docPath.sourceItem.matchedPattern}\`

## 📝 Method Information

- **Type:** ${docPath.sourceItem.type}
- **Value:** ${docPath.sourceItem.value}

## 🏗️ Structure

\`\`\`json
${JSON.stringify(docPath.sourceItem.metadata || {}, null, 2)}
\`\`\`

---
*Generated by deps-cli ${new Date().toISOString()}*
`;
        } else if (strategy === 'library-structure') {
          const libraryName = docPath.templateVariables.library || 'unknown'
          const methodName = docPath.templateVariables.method || docPath.sourceItem.value
          const isExternal = docPath.templateVariables.isExternal || false

          content = `# ${methodName}

## 📦 Library Structure

**Library:** \`${libraryName}\`
**Method:** \`${methodName}\`
**Namespace:** ${docPath.namespace}
**Strategy:** library-structure
**Source:** ${isExternal ? 'External Library' : docPath.sourceItem.sourcePath}
**Pattern:** \`${docPath.sourceItem.matchedPattern}\`

## 📚 Library Information

- **Type:** ${docPath.sourceItem.type}
- **Library Name:** ${libraryName}
- **Method Name:** ${methodName}
- **Import Type:** ${docPath.templateVariables.importType || 'unknown'}
- **Is External:** ${isExternal ? 'Yes' : 'No'}

## 🔗 Import Details

\`\`\`json
${JSON.stringify(docPath.sourceItem.metadata || {}, null, 2)}
\`\`\`

## 📖 Usage Context

This method is imported from the external library \`${libraryName}\` and used within the project.

---
*Generated by deps-cli ${new Date().toISOString()}*
`;
        } else if (strategy === 'namespace-grouping') {
          content = `# ${docPath.sourceItem.value}

## 🏷️ Namespace Grouping

**Namespace:** ${docPath.namespace}
**Strategy:** namespace-grouping
**Source:** \`${docPath.sourceItem.sourcePath}\`
**Pattern:** \`${docPath.sourceItem.matchedPattern}\`

## 🗂️ Type Information

- **Type:** ${docPath.sourceItem.type}
- **Value:** ${docPath.sourceItem.value}

## 📊 Type Details

\`\`\`json
${JSON.stringify(docPath.sourceItem.metadata || {}, null, 2)}
\`\`\`

---
*Generated by deps-cli ${new Date().toISOString()}*
`;
        }

        await fs.writeFile(fullPath, content, 'utf-8');
        totalCreated++;

      } catch (error) {
        console.error(`   ❌ 실패: ${docPath.documentPath}`, error.message);
      }
    }
  }

  console.log(`\n🎉 전체 네임스페이스 업데이트 완료!`);
  console.log(`📊 요약:`);
  console.log(`   📁 네임스페이스: ${results.length}개`);
  console.log(`   📄 수집된 항목: ${results.reduce((sum, r) => sum + r.totalCount, 0)}개`);
  console.log(`   📚 생성된 파일: ${totalCreated}개`);
}

updateAll().catch(console.error);